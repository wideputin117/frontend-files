// getting the state from redux state
const store = Redux.createStore(
  (state = 5) => state
);

// Change code below this line
var currentState = store.getState()

 //Define a function named actionCreator() that returns the action object when called.
 const action = {
    type: 'LOGIN'
  }
  
  // Define an action creator here: 
  function actionCreator() {
     return action;
   }

   //*********************************************************** */
   // dispatch the action
   const store = Redux.createStore(
    (state = {login: false}) => state
  );
  
  const loginAction = () => {
    return {
      type: 'LOGIN'
    }
  };
  
  // Dispatch the action here:
  store.dispatch(loginAction())

  //*********************************************************** */
  //************************************************************ */
  
  // modifying the state with reducer
  // default state
const defaultState = {
    login: false
  };
  
  const reducer = (state = defaultState, action) => {
    // Change code below this line
  if (action.type === "LOGIN") {
      return {
        login: true
      };
    } else {
      return state;
    }
    // Change code above this line
  };
  
  const store = Redux.createStore(reducer);
   // action
  const loginAction = () => {
    return {
      type: 'LOGIN'
    }
  };

  
//************************************************************ *//
//************************************************************ *//
  // using switch statement
  const defaultState = {
    authenticated: false
  };
  
  const authReducer = (state = defaultState, action) => {
    // Change code below this line
  switch(action.type) {
    case 'LOGIN' : return {authenticated: true};
     
     case 'LOGOUT' : return {authenticated: false};
     default: return{authenticated: false}
  }
    // Change code above this line
  };
  
  const store = Redux.createStore(authReducer);
  
  const loginUser = () => {
    return {
      type: 'LOGIN'
    }
  };
  
  const logoutUser = () => {
    return {
      type: 'LOGOUT'
    }
  };

  //************************************************************ *//
  //************************************************************ *//
  // registering subscriber with store

  const ADD = 'ADD';

const reducer = (state = 0, action) => {
  switch(action.type) {
    case ADD:
      return state + 1;
    default:
      return state;
  }
};

const store = Redux.createStore(reducer);

// Global count variable:
let count = 0;
function inCrement(){
  count += 1;
}
// Change code below this line
 store.subscribe(inCrement);
 
// Change code above this line

store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);

//************************************************************ *//
//************************************************************ **********//
//************************************************************ **********//
// combining multiple reducers
const INCREMENT = 'INCREMENT';
const DECREMENT = 'DECREMENT';

const counterReducer = (state = 0, action) => {
  switch(action.type) {
    case INCREMENT:
      return state + 1;
    case DECREMENT:
      return state - 1;
    default:
      return state;
  }
};

const LOGIN = 'LOGIN';
const LOGOUT = 'LOGOUT';

const authReducer = (state = {authenticated: false}, action) => {
  switch(action.type) {
    case LOGIN:
      return {
        authenticated: true
      }
    case LOGOUT:
      return {
        authenticated: false
      }
    default:
      return state;
  }
};

const rootReducer = Redux.combineReducers({
  count: counterReducer,
  auth: authReducer
})
// Define the root reducer here

const store = Redux.createStore(rootReducer);
//************************************************************ **********************************************************************************************//
//************************************************************ **********************************************************************************************//
//************************************************************ **********************************************************************************************//
// send data action to redux store
const ADD_NOTE = 'ADD_NOTE';

const notesReducer = (state = 'Initial State', action) => {
  switch(action.type) {
    // Change code below this line
case ADD_NOTE:
return action.text;
    // Change code above this line
    default:
      return state;
  }
};

const addNoteText = (note) => {
  // Change code below this line
return  {
  type:ADD_NOTE, 
  text: note
};
  // Change code above this line
};

const store = Redux.createStore(notesReducer);

console.log(store.getState());
store.dispatch(addNoteText('Hello!')); // sends data to fucntion
console.log(store.getState());
//************************************************************ **********************************************************************************************//

//************************************************************ **********************************************************************************************// 
// using middleware to handle async actions
const REQUESTING_DATA = 'REQUESTING_DATA'
const RECEIVED_DATA = 'RECEIVED_DATA'

const requestingData = () => { return {type: REQUESTING_DATA} }
const receivedData = (data) => { return {type: RECEIVED_DATA, users: data.users} }

const handleAsync = () => { // this an async action
  return function(dispatch) {
    // Dispatch request action here
dispatch(requestingData()) //dispatching the action
    setTimeout(function() {
      let data = {
        users: ['Jeff', 'William', 'Alice']
      }
      // Dispatch received data action here // dispatching the action
dispatch(receivedData(data))
    }, 2500);
  }
};
//defaul state
const defaultState = {
  fetching: false,
  users: []
};

const asyncDataReducer = (state = defaultState, action) => { // reducer // reducer are functions that take state and action as arguments and return a new state result//
  switch(action.type) {
    case REQUESTING_DATA:
      return {
        fetching: true,
        users: []
      }
    case RECEIVED_DATA:
      return {
        fetching: false,
        users: action.users
      }
    default:
      return state;
  }
};

const store = Redux.createStore(
  asyncDataReducer,
  Redux.applyMiddleware(ReduxThunk.default)
);